[
  {
    "mainImage": "https://res.cloudinary.com/lsh/image/upload/v1670764490/portfolio_img/vegetable/x1zhgvdggp1xviegwxfn.png",
    "title": "Vanila Js Game",
    "webUrl": "https://vegetable-garden.netlify.app/",
    "srcUrl": "https://github.com/sermyes/vegetable-garden/",
    "id": "vegetable",
    "data": [
      {
        "img": "https://res.cloudinary.com/lsh/image/upload/v1670764490/portfolio_img/vegetable/x1zhgvdggp1xviegwxfn.png",
        "desc": "* 순수 자바스크립트를 이용하여 간단한 웹게임을 만들었습니다. <br> * javascript function과 class로 구현했습니다. <br> * 게임내 모든 화면전환은 fadeIn/fadeOut함수 구현하여 사용했습니다."
      },
      {
        "img": "https://res.cloudinary.com/lsh/image/upload/v1670764489/portfolio_img/vegetable/upo8wrvhzejoeef6c3lr.png",
        "desc": "* 각각에 문자를 span에 넣어 animation delay를 사용해 구현하였고, window.onload에 넣어 소스가 모두 읽힌 후에 전환되도록 했습니다."
      },
      {
        "img": "https://res.cloudinary.com/lsh/image/upload/v1670764489/portfolio_img/vegetable/pendxzluhe1ipuz3tgfc.png",
        "desc": "* 플래쉬게임같이 로그인기능없고 단순히 아이디입력 후 플레이하도록 했습니다. <br> * ranking은 firebase database를 이용해 3등까지 표현했고, 랭킹이 밀려서 최대 6명이 넘어가면 다시 데이터베이스를 3등까지만 표시하도록 했습니다. <br> * 우측상단에는 bgm을 켜고 끌 수 있도록 했고 아이디는 미입력시 자동생성 되도록 했습니다."
      },
      {
        "img": "https://res.cloudinary.com/lsh/image/upload/v1670764489/portfolio_img/vegetable/wycqyygntfdv4ddasxp1.png",
        "desc": "* 게임시작과 라운드가 넘어갈 때, 시작대기시간을 모달로 띄우도록 했습니다."
      },
      {
        "img": "https://res.cloudinary.com/lsh/image/upload/v1670764489/portfolio_img/vegetable/yiflcrg9wk7fl43mdrbz.png",
        "desc": "* 게임화면에서는 field에 eventListner를 등록하여, vegetable 클릭시 count가 줄고, bug 클릭시 게임이 종료되도록 했습니다. <br> * 상위 라운드는 각각의 vegetable과 bug에 addEventListener로 field내 랜덤한 포지션으로 계속해서 이동하게 했고, 라운드가 끝날 시 다시 removeEventListner를 통해 이벤트를 제거하는 방식을 사용했습니다."
      },
      {
        "img": "https://res.cloudinary.com/lsh/image/upload/v1670764489/portfolio_img/vegetable/gvu6q0pmljzfcgtxcqbq.png",
        "desc": "* 승리시 지정한 라운드 만큼 계속 진행이 됩니다."
      },
      {
        "img": "https://res.cloudinary.com/lsh/image/upload/v1670764489/portfolio_img/vegetable/d26tbvcq1ao07u82ipbj.png",
        "desc": "* 각 라운드를 클리어시 다음 라운드로 이동하며, 점수는 남은 시간과 합계되어 연산되도록 했습니다. <br> * 최종 라운드 클리어 또는 bug를 클릭하여 게임종료가 되면, 다시 시작화면으로 이동하며, 현재 점수를 ranking과 비교하여 바로바로 적용되도록 하였습니다."
      }
    ]
  },
  {
    "mainImage": "https://res.cloudinary.com/lsh/image/upload/v1670764499/portfolio_img/business/ibkqkrmv6qvvj9ieocj0.png",
    "title": "React Business Web App",
    "webUrl": "https://sermyes.github.io/businessMaker/",
    "srcUrl": "https://github.com/sermyes/businessMaker/",
    "id": "business",
    "data": [
      {
        "img": "https://res.cloudinary.com/lsh/image/upload/v1670764499/portfolio_img/business/ibkqkrmv6qvvj9ieocj0.png",
        "desc": "* 명함과 컬러노트를 포함한 web application입니다. <br> * react router를 사용해 SPA를 만들었고, firebase와 cloudinary를 활용했습니다."
      },
      {
        "img": "https://res.cloudinary.com/lsh/image/upload/v1670764499/portfolio_img/business/lomwc33fkvxpw0wijidl.png",
        "desc": "* 처음 접속했을 때 로그인페이지로 firebase의 authservice를 사용해서 구글, 페이스북, github remote 로그인이 가능하며, 만든 이메일 계정으로도 로그인이 가능합니다. <br> * 비밀번호찾기와 계정생성이 연결되어 있습니다."
      },
      {
        "img": "https://res.cloudinary.com/lsh/image/upload/v1670764499/portfolio_img/business/susom5iwbdxxa1ceykcy.png",
        "desc": "* 이메일 계정을 생성할 수 있는 페이지이며, 폼 유효성검사를 통해 폼 윗부분에 span을 통해 에러메세지가 나오도록 했습니다."
      },
      {
        "img": "https://res.cloudinary.com/lsh/image/upload/v1670764499/portfolio_img/business/ecimxbccpafafildghd8.png",
        "desc": "* 이메일 계정을 입력하면 해당 이메일로 비밀번호를 재설정할 수 있는 링크가 전달됩니다."
      },
      {
        "img": "https://res.cloudinary.com/lsh/image/upload/v1670764499/portfolio_img/business/c44fpwi5z9evdfqbcdwv.png",
        "desc": "* 로그인했을 때 첫 페이지이며, 헤더는 로그인했을 때와 하지않았을 떄 두가지로 나눠 렌더링되게 해서 현재는 로그아웃을 할 수있는 버튼이 생성되었습니다. <br> * cash를 통해 로그아웃하지않았다면 재접속시 자동으로 해당 페이지로 이동됩니다. <br> * cash를 통해 로그아웃하지않았다면 재접속시 자동으로 해당 페이지로 이동됩니다. <br> * 로고는 기본로고가 제공되고 사용자 로고를 등록하면 cloudinary에 저장됩니다. <br> * 카드 디자인은 기본으로 5개가 제공되며, 앞부분은 company명이 들어가며, 뒷부분은 정보와 로고가 들어갑니다. <br> * 카드는 버튼을 통해 앞면과 뒷면을 돌려볼 수 있습니다."
      },
      {
        "img": "https://res.cloudinary.com/lsh/image/upload/v1670764499/portfolio_img/business/ehoiflli46yapbuboo7d.png",
        "desc": "* 헤더에 메뉴버튼을 통해 noteMaker로ss 이동할 수 있습니다. <br> * noteMaker에는 +버튼을 통해 노트를 생성할 수 있습니다. <br> * 제목부분의 화살표를 누르면 note관리 modal, 내용부분을 누르면 해당 노트의 modal이 띄워집니다."
      },
      {
        "img": "https://res.cloudinary.com/lsh/image/upload/v1670764499/portfolio_img/business/cpe4qv2fccbwbw81dyvu.png",
        "desc": "* 노트의 내용부분 클릭시에 노트를 수정, 삭제할 수 있는 모달이 띄워집니다. <br> * 해당노트의 색상을 다양한 색상으로 변경이 가능하며, 수정시에 노트의 업데이트 날짜가 변경됩니다."
      },
      {
        "img": "https://res.cloudinary.com/lsh/image/upload/v1670764499/portfolio_img/business/q6izuahlfyar11ainplh.png",
        "desc": "* noteMaker의 노트 제목부분의 ▼ 혹은 noteMaker title의 톱니바퀴를 클릭하면 나오는 노트관리 모달입니다. <br> * 몇가지 default setting을 설정할 수 있으며, 해당 계정의 default setting값으로 저장되게 됩니다. <br> * default setting값으로는 font-size와 color가 있으며, 해당 옵션 변경시 모든 노트에 font-size에 적용되고 color는 새로운 노트생성시 기본색상으로 적용됩니다. <br> * noteMaker페이지와 마찬가지로 노트를 생성할 수 있으며, 날짜와 제목순으로 정렬기능과 특정 단어가 포함된 노트들을 검색할 수 있는 기능이 포함되어 있습니다."
      }
    ]
  },
  {
    "mainImage": "https://res.cloudinary.com/lsh/image/upload/v1670764510/portfolio_img/routine/wt1sitywyfy1vogqfjje.png",
    "title": "myRoutine TS App",
    "webUrl": "https://sermyes.github.io/myRoutine/",
    "srcUrl": "https://github.com/sermyes/myRoutine",
    "id": "myRoutine",
    "data": [
      {
        "img": "https://res.cloudinary.com/lsh/image/upload/v1670764510/portfolio_img/routine/wt1sitywyfy1vogqfjje.png",
        "desc": "* 타입스크립트를 활용해서 Routine과 Todo를 저장할 수 있는 앱을 만들었습니다. <br> * 데이터베이스를 쓸 경우에 바로 활용할 수 있도록 따로 presenter class를 생성하여, <br> 한곳에서 데이터를 추가,삭제,업데이트 등 처리하도록 하였습니다."
      },
      {
        "img": "https://res.cloudinary.com/lsh/image/upload/v1670764511/portfolio_img/routine/mdrcbqv6yaztgwhgpbuc.png",
        "desc": "* 첫 화면은 해당 요일에 해당하는 요일이 주황색으로 칠해져서 표시되게 했고 모든 데이터가 보이도록 했습니다. <br> * 다른 요일을 클릭하여 해당 요일로 변경할 수 있으며 변경시에도 오늘에 해당하는 요일은 그대로 주황색이 표시되어있습니다. <br> Routine데이터는 모든 요일 공통, Todo는 각각의 요일에만 해당되도록 했습니다."
      },
      {
        "img": "https://res.cloudinary.com/lsh/image/upload/v1670764509/portfolio_img/routine/wozfzc8kqk05gbzqwtt3.png",
        "desc": "* 하단에 +버튼을 누를 경우 각각 Routine과 Todo를 생성할 수 있는 버튼이 모달로 띄워집니다."
      },
      {
        "img": "https://res.cloudinary.com/lsh/image/upload/v1670764510/portfolio_img/routine/nrz9j8uixc4tr04u2zqp.png",
        "desc": "* 위 버튼을 통해 다이어로그가 모달로 생성되며, 추가시 각각 요일에 맞게 추가됩니다."
      },
      {
        "img": "https://res.cloudinary.com/lsh/image/upload/v1670764510/portfolio_img/routine/fnulqgb0a559cenfhzn2.png",
        "desc": "* 간단하게 input:time과 title을 입력받으며, <br> 폼유효성 검사를 통해 모두 입력되어야만 Add버튼이 눌리게 했습니다."
      },
      {
        "img": "https://res.cloudinary.com/lsh/image/upload/v1670764510/portfolio_img/routine/d6tyxvrdrlfirqskerg7.png",
        "desc": "* 각 데이터별 시간순으로 sort이 되며, 각각 filter메뉴에 맞게 데이터들이 표시되도록 했습니다."
      },
      {
        "img": "https://res.cloudinary.com/lsh/image/upload/v1670764510/portfolio_img/routine/abxnhfyf3ylbwtgaee4q.png",
        "desc": "* 각각의 데이터들은 상태를 표시할 수 있으며, 버튼을 통해 변경이 가능하게 했습니다."
      },
      {
        "img": "https://res.cloudinary.com/lsh/image/upload/v1670764510/portfolio_img/routine/ezi1pr4nwq2nyvq2fgxn.png",
        "desc": "* 주간버튼을 통해 루틴은 월~일까지 미리 상태를 변경할 수 있으며, 각각 요일에 맞게 동기화되게 했습니다 <br> 투두는 각각 요일마다 따로 표시가 되며 주간도 해당 요일만 상태가 변경될 수 있게 했습니다."
      }
    ]
  },
  {
    "mainImage": "https://res.cloudinary.com/lsh/image/upload/v1671805285/portfolio_img/musicCenter/mrpc4hvrooaw8c5w6v5j.png",
    "title": "React MusicCenter Web - JS",
    "webUrl": "https://sermyes.github.io/musicCenter",
    "srcUrl": "https://github.com/sermyes/musicCenter",
    "id": "musicCenter",
    "data": [
      {
        "img": "https://res.cloudinary.com/lsh/image/upload/v1671805285/portfolio_img/musicCenter/mrpc4hvrooaw8c5w6v5j.png",
        "desc": "* react로 구현한 반응형 웹사이트 입니다. <br> * 평소에 많이 이용하던 음악집합소 블로그에서 아이디어를 생각해내서 최신음악이나 여러음악들을 모음집으로 무료듣기를 제공하는 웹사이트를 만들었습니다. <br> * youtube api를 이용하여 제 유투브 계정의 재생목록을 axios로 읽어오는 방식으로 사용했습니다. <br> * 음악 업데이트 및 삭제는 유투브 계정의 음악집합소 재생목록에서 삭제가능하며, 업데이트는 원하는 동영상을 목록에 추가하면 실시간으로 반영할 수 있게 했습니다."
      },
      {
        "img": "https://res.cloudinary.com/lsh/image/upload/v1670764506/portfolio_img/musicCenter/n3psmq2wn4cqdhdzelba.png",
        "desc": "* 웹사이트 구조는 fullpage.js와 비슷하게 구현하기위해 각 섹션마다 wheel과 keyup eventListener를 추가해 휠과 키보드 up, down를 사용해 페이지단위로 이동하게 구현하였습니다. <br> * menu이동은 992px을 기준으로 navigation으로 이동가능하게 구현하였습니다."
      },
      {
        "img": "https://res.cloudinary.com/lsh/image/upload/v1670764506/portfolio_img/musicCenter/dq6mi8m8tyk8w8jevdvx.png",
        "desc": "* 991px부터는 navigation대신 메뉴버튼을 클릭시에 메뉴바가 나오도록 구현하였습니다."
      },
      {
        "img": "https://res.cloudinary.com/lsh/image/upload/v1670764507/portfolio_img/musicCenter/qar1hftngygkki0uhcl1.png",
        "desc": "* youtube api로 데이터를 받아와 sort를 사용해 음악목록에서 새로 추가된 날짜를 기준으로 업데이트된 음악을 보여주도록 하였습니다."
      },
      {
        "img": "https://res.cloudinary.com/lsh/image/upload/v1670764507/portfolio_img/musicCenter/nrjc23dr7qh2v0ccurzs.png",
        "desc": "* 음악목록 전체 리스트를 슬라이드로 보여주도록 구현했습니다. <br> * 멀티 슬라이드 컴포넌트는 반응형으로 작동되도록 직접 만들어서 사용했습니다. <br> * props(settings)의 option으로는 dots와 arrow를 on/off, slidesToShow 갯수, responsive size를 지정하면 반응형으로 앞에 옵션들을 선택적용되도록 구현하였습니다."
      },
      {
        "img": "https://res.cloudinary.com/lsh/image/upload/v1670764507/portfolio_img/musicCenter/djiay80wnvlxj7mzy3ec.png",
        "desc": "각각의 뮤직을 클릭하면 modal로 렌더링되어 음악을 플레이할 수 있도록 했습니다. <br> * modal은 portal을 이용하여 따로 렌더링되게 했고, modal이 active될때는 뒷배경의 scroll을 고정시켰습니다."
      },
      {
        "img": "https://res.cloudinary.com/lsh/image/upload/v1670764506/portfolio_img/musicCenter/m7ijdh5bqffxatr1hzub.png",
        "desc": "* 음악요청과 문의 게시판으로 간단하게 firebase database를 이용하여 댓글형식으로 구현했습니다. <br> * 공지사항은 미리 등록된 admin password를 입력해서 등록할 수 있으며, 상단에 위치하도록 했습니다. <br> 아래 글들은 요청과 문의로 나눠 authservice없이 등록할 수 있으며, admin password나 등록된 password로 삭제가 가능하도록 했습니다. <br> * form의 유효성검사는 window.alert를 사용했고, 게시글들은 날짜순으로 정렬되게 했습니다."
      }
    ]
  },
  {
    "mainImage": "https://res.cloudinary.com/lsh/image/upload/v1671805313/portfolio_img/musicCenter/baflyolcvtxe3tpgckem.png",
    "title": "React MusicCenter Web - TS + testing",
    "webUrl": "https://sermyes.github.io/music-center/",
    "srcUrl": "https://github.com/sermyes/music-center",
    "id": "musicCenter",
    "data": [
      {
        "img": "https://res.cloudinary.com/lsh/image/upload/v1671805313/portfolio_img/musicCenter/baflyolcvtxe3tpgckem.png",
        "desc": "Java Script를 이용하여 만든 Music Center 웹을 전부 Tyscript로 변경하여 refactoring 했습니다. <br> 기능을 따로 추가하진 않았고 스타일링을 조금 더 가다듬고 테스트에 용이하게 코드를 변경했습니다."
      },
      {
        "img": "https://res.cloudinary.com/lsh/image/upload/v1671805731/portfolio_img/musicCenter/l8bqfoakocwx2ktegm2j.png",
        "desc": "* Jest, Testing-library를 이용해서 각각의 컴포넌트를 Unit Test하고 <br> renderer를 이용해서 snapshot 테스트도 진행했습니다."
      },
      {
        "img": "https://res.cloudinary.com/lsh/image/upload/v1671805489/portfolio_img/musicCenter/ovnyp9oalse5lo04dntw.png",
        "desc": "* 모든 컴포넌트를 대상으로 테스트를 진행했고, <br> 반응형부분과 같은 코드들은 유닛 테스트하기가 힘들어서 <br> E2E테스트에서 해보려고 제외했습니다."
      },
      {
        "img": "https://res.cloudinary.com/lsh/image/upload/v1671805494/portfolio_img/musicCenter/cf8tjlitx22684hn2tni.png",
        "desc": "* 원페이지 웹이기때문에 app컴포넌트를 대상으로 cypress로 E2E테스트를 진행했습니다. <br> youtube video같은 경우는 intercept를 활용해 생성해놓은 json으로 대체했고 <br> Unit Test에서 하지 못했던 테스트를 포함해서 전제적인 기능들을 테스트해봤습니다."
      }
    ]
  }
]
